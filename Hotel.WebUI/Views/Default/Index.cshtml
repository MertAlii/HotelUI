@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="tr">

@await Component.InvokeAsync("_HeadPartial")

<body>
    <div class="main-wrapper bg-white p-0">

        @await Component.InvokeAsync("_SpinnerPartial")

        @await Component.InvokeAsync("_NavbarPartial")

        @await Component.InvokeAsync("_SliderPartial")

        @await Component.InvokeAsync("_ReservationPartial")

        @await Component.InvokeAsync("_AboutUsPartial")

        @await Component.InvokeAsync("_OurRoomsPartial")

        @await Component.InvokeAsync("_TrailerPartial")

        @await Component.InvokeAsync("_ServicePartial")

        @await Component.InvokeAsync("_TestimonialPartial")

        @await Component.InvokeAsync("_TeamPartial")

        @await Html.PartialAsync("_SubscribePartial.cshtml")

        @await Component.InvokeAsync("_FooterPartial") 

        <a href="#" class="btn btn-lg btn-primary btn-lg-square back-to-top"><i class="bi bi-arrow-up"></i></a>
    </div>
    @await Component.InvokeAsync("_ScriptsPartial")
</body>
</html>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const sections = ['rooms','reservation','contact'];
  const navLinks = new Map(
    sections.map(id => [id, document.querySelector(`.navbar a[href*="#${id}"]`)])
  );

  const observer = new IntersectionObserver(entries => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        navLinks.forEach(link => link?.classList.remove('active'));
        navLinks.get(entry.target.id)?.classList.add('active');
      }
    });
  }, { rootMargin: '-40% 0px -50% 0px', threshold: 0 });

  sections.forEach(id => {
    const el = document.getElementById(id);
    if (el) observer.observe(el);
  });
});
</script>